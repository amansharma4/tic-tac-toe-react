{"version":3,"sources":["components/Player.js","App.js","serviceWorker.js","index.js"],"names":["Player","handleForm","e","preventDefault","selectedPlayer","target","player","value","props","onSubmit","type","name","Component","App","handleCLick","index","state","board","winner","newBoard","setState","checkWinner","winLines","length","a","b","c","alert","setPlayer","Array","fill","Box","this","map","item","className","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAEqBA,E,4MAGjBC,WAAa,SAACC,GACVA,EAAEC,iBACF,IAAIC,EAAiBF,EAAEG,OAAOC,OAAOC,MACrC,EAAKC,MAAMF,OAAOF,I,uDAEZ,IAAD,OACL,OACI,0BAAMK,SAAU,SAACP,GAAO,EAAKD,WAAWC,KACpC,0CAEI,2BAAOQ,KAAK,QAAQC,KAAK,SAASJ,MAAM,OAE5C,0CAEI,2BAAOG,KAAK,QAAQC,KAAK,SAASJ,MAAM,OAE5C,2BAAOG,KAAK,SAASH,MAAM,e,GAnBPK,aCCfC,E,kDACnB,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IASRM,YAAc,SAACC,GAAW,IAAD,EACW,EAAKC,MAA/BC,EADe,EACfA,MAAOX,EADQ,EACRA,OAAQY,EADA,EACAA,OAGvB,IAAKD,EAAMF,KAAWG,GAAUZ,EAAQ,CACtC,IAAIa,EAAWF,EACfE,EAASJ,GAAST,EAClB,EAAKc,SAAS,CACZH,MAAOE,EACPb,OAAmB,MAAXA,EAAiB,IAAM,MAIjC,EAAKe,gBAvBU,EA2BnBA,YAAc,WAeZ,IAfmB,IACXf,EAAW,EAAKU,MAAhBV,OAEJgB,EAAW,CACb,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,MAIJP,EAAQ,EAAGA,EAAQO,EAASC,OAAQR,IAAS,mBAGlCO,EAASP,GAHyB,GAG7CS,EAH6C,KAG1CC,EAH0C,KAGvCC,EAHuC,KAMhDT,EAAQ,EAAKD,MAAMC,MAGnBA,EAAMO,IAAMP,EAAMO,KAAOP,EAAMQ,IAAMR,EAAMO,KAAOP,EAAMS,KAC1DC,MAAM,UAAD,OAAWrB,EAAX,SACL,EAAKc,SAAS,CACZF,OAAQ,EAAKF,MAAMV,YAtDR,EA2DnBsB,UAAY,SAACtB,GACX,EAAKc,SAAS,CACZd,YA3DF,EAAKU,MAAQ,CACXC,MAAOY,MAAM,GAAGC,KAAK,MACrBxB,OAAQ,KACRY,OAAQ,MALO,E,qDAgET,IAAD,OAEDa,EADYC,KAAKhB,MAAfC,MACUgB,KAAI,SAACC,EAAMnB,GAC3B,OACE,yBAAKoB,UAAU,MAAMC,IAAKrB,EAAOsB,QAAS,kBAAM,EAAKvB,YAAYC,KAC9DmB,MAIP,OACE,yBAAKC,UAAU,aACb,2CACA,kBAAC,EAAD,CAAQ7B,OAAQ0B,KAAKJ,YACrB,yBAAKO,UAAU,SACZJ,Q,GA/EsBnB,aCSb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.54f195ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Player extends Component {\n\n    // some logic needs to be done for onsubmit event handler\n    handleForm = (e) => {\n        e.preventDefault();     // prevent a browser reload/refresh\n        let selectedPlayer = e.target.player.value;\n        this.props.player(selectedPlayer);      // calls setPlayer() function of parent;\n    }\n    render() {\n        return (\n            <form onSubmit={(e) => {this.handleForm(e)}}>\n                <label>\n                    Player X\n                    <input type=\"radio\" name=\"player\" value=\"X\"/>\n                </label>\n                <label>\n                    Player O\n                    <input type=\"radio\" name=\"player\" value=\"O\"/>\n                </label>\n                <input type=\"submit\" value=\"Start\"/>\n            </form>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Player from './components/Player';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: Array(9).fill(null),\n      player: null,\n      winner: null\n    };\n\n  }\n\n  handleCLick = (index) => {\n    const { board, player, winner } = this.state;\n\n    // update state values whenever a move happens\n    if (!board[index] && !winner && player) {\n      let newBoard = board;\n      newBoard[index] = player;\n      this.setState({\n        board: newBoard,\n        player: player === \"X\" ? \"O\" : \"X\"\n\n      });\n      // after every move we are checking winner\n      this.checkWinner();\n    }\n  }\n  \n  checkWinner = () => {\n    const { player } = this.state;\n    // winlines: possible win combinations\n    let winLines = [\n      [\"0\", \"1\", '2'],\n      [\"3\", \"4\", '5'],\n      [\"6\", \"7\", '8'],\n      [\"0\", \"3\", '6'],\n      [\"1\", \"4\", '7'],\n      [\"2\", \"5\", '8'],\n      [\"0\", \"4\", '8'],\n      [\"2\", \"4\", '6'],\n    ];\n\n    // we are iterating for win combinations inside board\n    for (let index = 0; index < winLines.length; index++) {\n      // destructuring win combination : E.g: winLines[index] = [\"0\", \"1\", '2'];\n      // a = 0, b = 1, c = 2 \n      const [a, b, c] = winLines[index];\n\n      // updated board\n      let board = this.state.board;\n\n      // compare values on a, b and c on the baord if they are same\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        alert(`Player ${player} won`);\n        this.setState({\n          winner: this.state.player\n        })\n      }\n    }\n  }\n  setPlayer = (player) => {\n    this.setState({\n      player\n    })\n  }\n  render() {\n    const { board } = this.state;\n    const Box = board.map((item, index) => {\n      return (\n        <div className=\"box\" key={index} onClick={() => this.handleCLick(index)}>\n          {item}\n        </div>\n      )\n    });\n    return (\n      <div className=\"container\">\n        <h1>Tic Tac Toe</h1>\n        <Player player={this.setPlayer} />\n        <div className=\"board\">\n          {Box}\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\n\n// first build board\n// then squares\n// event Handler\n// finish printing \"X\"\n// switch user -> X to O\n\n\n// install react developer tools\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Assignment:\n// write code for: to show alert Tie\n// build feature to give a choice for first player eithrt \"X\" or \"O\"\n// specify alert which user won\n// refactor code and do component split","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}